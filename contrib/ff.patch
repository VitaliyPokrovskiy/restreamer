diff -wa -u orig/capabilities.js ./capabilities.js
--- orig/capabilities.js	2024-07-09 13:06:48.844760158 +0700
+++ ./capabilities.js	2024-07-09 13:49:10.978825482 +0700
@@ -19,7 +19,7 @@
 var lineBreakRegexp = /\r\n|\r|\n/;
 var filterRegexp = /^(?: [T\.][S\.][C\.] )?([^ ]+) +(AA?|VV?|\|)->(AA?|VV?|\|) +(.*)$/;
 
-var cache = {};
+const cache = require('./cache.json');
 
 module.exports = function(proto) {
   /**
@@ -304,13 +304,13 @@
         return callback(err);
       }
 
-      var stdout = stdoutRing.get();
-      var lines = stdout.split('\n');
-      var data = {};
-      var types = { A: 'audio', V: 'video', '|': 'none' };
+      // const stdout = stdoutRing.get();
+      // const lines = stdout.split('\n');
+      const data = {};
+      const types = { A: 'audio', V: 'video', '|': 'none' };
 
-      lines.forEach(function(line) {
-        var match = line.match(filterRegexp);
+      for (let line of stdoutRing.enumerate()) {
+        let match = line.match(filterRegexp);
         if (match) {
           data[match[1]] = {
             description: match[4],
@@ -320,7 +320,7 @@
             multipleOutputs: match[3].length > 1
           };
         }
-      });
+      }
 
       callback(null, cache.filters = data);
     });
diff -wa -u orig/fluent-ffmpeg.js ./fluent-ffmpeg.js
--- orig/fluent-ffmpeg.js	2024-07-09 13:06:48.856760343 +0700
+++ ./fluent-ffmpeg.js	2024-08-02 18:18:48.405327600 +0700
@@ -57,7 +57,7 @@
 
   // Create argument lists
   var self = this;
-  ['_global', '_complexFilters'].forEach(function(prop) {
+  ['_global', '_complexFilters'].forEach((prop) => {
     self[prop] = utils.args();
   });
 
@@ -179,9 +179,7 @@
 
 require('./capabilities')(FfmpegCommand.prototype);
 
-FfmpegCommand.setFfmpegPath = function(path) {
-  (new FfmpegCommand()).setFfmpegPath(path);
-};
+FfmpegCommand.setFfmpegPath = (path) => FfmpegCommand.prototype.setFfmpegPath(path);
 
 FfmpegCommand.setFfprobePath = function(path) {
   (new FfmpegCommand()).setFfprobePath(path);
Только в .: options
Только в .: orig
Только в .: presets
diff -wa -u orig/processor.js ./processor.js
--- orig/processor.js	2024-07-09 13:06:48.856760343 +0700
+++ ./processor.js	2024-08-02 19:23:04.152930351 +0700
@@ -1,13 +1,13 @@
 /*jshint node:true*/
 'use strict';
 
-var spawn = require('child_process').spawn;
-var path = require('path');
-var fs = require('fs');
-var async = require('async');
-var utils = require('./utils');
+const { spawn } = require('child_process');
+// var path = require('path');
+// var fs = require('fs');
+const async = require('async');
+const utils = require('./utils');
 
-var nlRegexp = /\r\n|\r|\n/g;
+// var nlRegexp = /\r\n|\r|\n/g;
 
 /*
  *! Processor methods
@@ -126,7 +126,7 @@
       processCB = function() {};
     }
 
-    var maxLines = 'stdoutLines' in options ? options.stdoutLines : this.options.stdoutLines;
+    const maxLines = 'stdoutLines' in options ? options.stdoutLines : this.options.stdoutLines;
 
     // Find ffmpeg
     this._getFfmpegPath(function(err, command) {
@@ -151,13 +151,11 @@
       // Spawn process
       var ffmpegProc = spawn(command, args, options);
 
-      if (ffmpegProc.stderr) {
-        ffmpegProc.stderr.setEncoding('utf8');
-      }
+      // if (ffmpegProc.stderr) {
+      //   ffmpegProc.stderr.setEncoding('utf8');
+      // }
 
-      ffmpegProc.on('error', function(err) {
-        endCB(err);
-      });
+      ffmpegProc.on('error', (err) => endCB(err));
 
       // Ensure we wait for captured streams to end before calling endCB
       var exitError = null;
@@ -187,11 +185,9 @@
 
       // Capture stdout if specified
       if (options.captureStdout) {
-        ffmpegProc.stdout.on('data', function(data) {
-          stdoutRing.append(data);
-        });
-
-        ffmpegProc.stdout.on('close', function() {
+        ffmpegProc.stdout
+          .on('data', (data) => stdoutRing.append(data))
+          .on('close', () => {
           stdoutRing.close();
           stdoutClosed = true;
           handleExit();
@@ -199,11 +195,9 @@
       }
 
       // Capture stderr if specified
-      ffmpegProc.stderr.on('data', function(data) {
-        stderrRing.append(data);
-      });
-
-      ffmpegProc.stderr.on('close', function() {
+      ffmpegProc.stderr
+        .on('data', (data) => stderrRing.append(data))
+        .on('close', () => {
         stderrRing.close();
         stderrClosed = true;
         handleExit();
@@ -365,7 +359,7 @@
       }
     ], callback);
 
-    if (!readMetadata) {
+    if (false) {
       // Read metadata as soon as 'progress' listeners are added
 
       if (this.listeners('progress').length > 0) {
@@ -419,18 +413,14 @@
     function emitEnd(err, stdout, stderr) {
       if (!ended) {
         ended = true;
-
-        if (err) {
-          self.emit('error', err, stdout, stderr);
-        } else {
-          self.emit('end', stdout, stderr);
-        }
+          err ? self.emit('error', err, stdout, stderr) : self.emit('end', stdout, stderr);
       }
     }
 
     self._prepare(function(err, args) {
       if (err) {
-        return emitEnd(err);
+          emitEnd(err);
+          return;
       }
 
       // Run ffmpeg
@@ -507,9 +497,7 @@
 
             // 'stderr' event
             if (self.listeners('stderr').length) {
-              stderrRing.callback(function(line) {
-                self.emit('stderr', line);
-              });
+                stderrRing.callback((line) => { self.emit('stderr', line); });
             }
 
             // 'codecData' event
@@ -551,7 +539,8 @@
             if (flvmeta.length) {
               self._getFlvtoolPath(function(err, flvtool) {
                 if (err) {
-                  return emitEnd(err);
+                    emitEnd(err);
+                    return;
                 }
 
                 async.each(
diff -wa -u orig/recipes.js ./recipes.js
--- orig/recipes.js	2024-07-09 13:06:48.856760343 +0700
+++ ./recipes.js	2024-08-02 18:17:22.105843718 +0700
@@ -54,9 +54,9 @@
     }
 
     if (!stream) {
-      if (process.version.match(/v0\.8\./)) {
-        throw new Error('PassThrough stream is not supported on node v0.8');
-      }
+      // if (process.version.match(/v0\.8\./)) {
+      //   throw new Error('PassThrough stream is not supported on node v0.8');
+      // }
 
       stream = new PassThrough();
     }
diff -wa -u orig/utils.js ./utils.js
--- orig/utils.js	2024-07-09 13:06:48.860760406 +0700
+++ ./utils.js	2024-08-24 07:22:14.814559410 +0700
@@ -1,7 +1,7 @@
 /*jshint node:true*/
 'use strict';
 
-var exec = require('child_process').exec;
+// var exec = require('child_process').exec;
 var isWindows = require('os').platform().match(/win(32|64)/);
 var which = require('which');
 
@@ -40,6 +40,67 @@
   return progress;
 }
 
+class ring {
+  cbs = [];
+  /**@type {Array.<string>} */ lines = [];
+  current = '';
+  closed = false;
+
+  constructor(maxLines) {
+    this.max = maxLines - 1;
+  }
+
+  emit(line) {
+    for (let cb of this.cbs) cb(line);
+    this.max && this.lines.push(line);
+  }
+
+  callback(cb) {
+    for (let line of this.lines) cb(line);
+    this.cbs.push(cb);
+  }
+
+  /**@param {Buffer} chunk*/
+  append(chunk) {
+    if (this.closed) return;
+    for (let i = 0; i < chunk.length; i++) if (chunk[i] == 13) chunk[i] = 10;
+
+    let newLines = chunk.toString().split('\n');
+    this.current += newLines.shift();
+
+    if (newLines.length > 0) {
+      this.emit(this.current);
+      this.current = newLines.pop();
+      for (let line of newLines) this.emit(line);
+
+      if (this.max > 0 && this.lines.length > this.max) {
+        this.lines.splice(0, this.lines.length - this.max);
+      }
+    }
+  }
+
+  get() {
+    if (this.current) {
+      return this.lines.concat([this.current]).join('\n');
+    } else {
+      return this.lines.join('\n');
+    }
+  }
+
+  *enumerate() {
+    for (let line of lines) yield line;
+    if (this.current) yield this.current;
+  }
+
+  close() {
+    if (!this.closed) {
+      this.closed = true;
+      this.current && this.emit(this.current);
+      this.current = '';
+      if (this.max > 0 && this.lines.length > this.max) this.lines.shift();
+    }
+  }
+}
 
 var utils = module.exports = {
   isWindows: isWindows,
@@ -376,80 +437,5 @@
    *
    * @param {Numebr} maxLines maximum number of lines to store (<= 0 for unlimited)
    */
-  linesRing: function(maxLines) {
-    var cbs = [];
-    var lines = [];
-    var current = null;
-    var closed = false
-    var max = maxLines - 1;
-
-    function emit(line) {
-      cbs.forEach(function(cb) { cb(line); });
-    }
-
-    return {
-      callback: function(cb) {
-        lines.forEach(function(l) { cb(l); });
-        cbs.push(cb);
-      },
-
-      append: function(str) {
-        if (closed) return;
-        if (str instanceof Buffer) str = '' + str;
-        if (!str || str.length === 0) return;
-
-        var newLines = str.split(nlRegexp);
-
-        if (newLines.length === 1) {
-          if (current !== null) {
-            current = current + newLines.shift();
-          } else {
-            current = newLines.shift();
-          }
-        } else {
-          if (current !== null) {
-            current = current + newLines.shift();
-            emit(current);
-            lines.push(current);
-          }
-
-          current = newLines.pop();
-
-          newLines.forEach(function(l) {
-            emit(l);
-            lines.push(l);
-          });
-
-          if (max > -1 && lines.length > max) {
-            lines.splice(0, lines.length - max);
-          }
-        }
-      },
-
-      get: function() {
-        if (current !== null) {
-          return lines.concat([current]).join('\n');
-        } else {
-          return lines.join('\n');
-        }
-      },
-
-      close: function() {
-        if (closed) return;
-
-        if (current !== null) {
-          emit(current);
-          lines.push(current);
-
-          if (max > -1 && lines.length > max) {
-            lines.shift();
-          }
-
-          current = null;
-        }
-
-        closed = true;
-      }
-    };
-  }
+  linesRing: new ring(maxLines)
 };
